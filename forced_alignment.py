# -*- coding: utf-8 -*-
"""Copy of Points_Test2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NreWVrqIuXUgNQ82rMIcLyh6-Wg3oSJ-
"""

import pickle

# Down scale factor
factor_map = {'3': 0.7068273092369478,
 '4': 0.6778989098116948,
 '5': 0.7068273092369478,
 '6': 0.6778989098116948,
 '7': 0.7068273092369478,
 '8': 0.6778989098116948,
 '9': 0.7068273092369478,
 '10': 0.688800792864222,
 '11': 0.7118473895582329,
 '12': 0.688800792864222,
 '13': 0.7118473895582329,
 '14': 0.688622754491018,
 '15': 0.7127016129032258,
 '16': 0.6888667992047713,
 '17': 0.7122448979591837,
 '18': 0.6888667992047713,
 '19': 0.7081632653061225,
 '20': 0.6888667992047713,
 '21': 0.7081632653061225,
 '22': 0.6888667992047713,
 '23': 0.7081632653061225,
 '24': 0.6888667992047713,
 '25': 0.7081632653061225,
 '26': 0.6918489065606361,
 '27': 0.7081632653061225,
 '28': 0.6918489065606361,
 '29': 0.7081632653061225}

characters_list = ["(" + str(i) + ")" for i in range(1, 51)]

import pickle

with open(f'ref_map.pkl', 'rb') as pickle_file:
        ref_map = pickle.load(pickle_file)

for k in range(3,29):
    to_remove = []
    for ele in ref_map[k]:
        if len(ele.strip()) == 0:
            to_remove.append(ele)

    for t in to_remove:
        ref_map[k].remove(t)


for k in range(3,29):
    for i in range(len(ref_map[k])):
        for c in characters_list:
            ref_map[k][i] = ref_map[k][i].replace(c,'')

def get_points_bw_lines(start,end):
  in_bw_pts = []
  e1 = start[0]
  constant = start[1]
  e2 = end[0]

  for c in range(e1,e2+1):
    in_bw_pts.append((c,constant))

  return in_bw_pts

for k in range(3,29):

  m = factor_map[str(k)]
  with open(f'points_data/test_pts{k}.pkl', 'rb') as file:
        final_pts = pickle.load(file)
  points = [[(int(f[0][0]*m), int(f[0][1]*m)),(int(f[1][0]*m), int(f[1][1]*m))] for f in final_pts]
  image_path = f'resized_img/{k}.jpg'
  path = f'final_points_data/final_pts{k}.pkl'

  all_in_bw_points = []

  for p in points:
    in_bw_points = get_points_bw_lines(p[0],p[1])
    all_in_bw_points.append(in_bw_points)

  temp = ref_map[k]
  percentages = []
  for t in temp:
    n = len(t)

    init_words = t.split()
    words = []
    for w in init_words:
      words.append(w)
      words.append(' ')
    words.pop()
    sub_percentages = []
    for w in words:
      m = len(w)
      sub_percentages.append(m/n)

    percentages.append(sub_percentages)


  for i in range(len(temp)):
    print(temp[i]," ",percentages[i])

  all_segments = []

  for i in range(len(all_in_bw_points)):
    points = all_in_bw_points[i]
    n = len(points)
    percents = percentages[i]
    start = 0
    end = int(n*percents[0])
    segments = [(start,end)]

    for p in percents[1:]:
      start = end
      end = start + int(n*p)
      segments.append((start,end))

    all_segments.append(segments)


  final_segments = []
  caps_alphas = ['A', 'B', 'C', 'D', 'E', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'O', 'Q', 'R', 'S', 'U', 'V', 'W', 'X', 'Z']
  #print(temp)
  for i in range(len(all_segments)):
    points = all_in_bw_points[i]
    list_ = all_segments[i]
    init_words = temp[i].split()
    words = []
    for w in init_words:
      words.append(w)
      words.append(' ')
    words.pop()

    sub_segments = []

    print('list_',list_)
    print('words',words)

    print('POINTS ', points)


    for j in range(len(list_)):
      word = words[j]
      wn = len(word)
      init_percent = 1/wn
      percentages_word = [0 for _ in range(wn)]

      cnt = 0

      bool_caps = False
      large_percent = init_percent*1.5
      for w in word:
        if w in caps_alphas:
          percentages_word[cnt] = large_percent
          bool_caps = True
          break
        cnt+=1

      if bool_caps:
        if wn>1:
          remainder = (1 - large_percent)/(wn - 1)
        else:
          remainder = init_percent
      else:
        remainder = init_percent


      for idx in range(len(percentages_word)):
        if percentages_word[idx] == 0:
          percentages_word[idx] = remainder

      print('PERCENTAGES ',percentages_word)
      tup = list_[j]
      start = tup[0]
      n = (tup[-1]) - start

      sub_sub_segments = []
      for p in percentages_word:
        term = n*p
        term_temp = int(term)
        if term - term_temp<0.5:
          term = term_temp
        else:
          term = term_temp + 1
        term = int(term)
        end = start + term
        sub_sub_segments.append(points[start:end])
        start = end

      if word == ' ':
        sub_sub_segments = []

      print('SUB SUB SEGMENTS ', sub_sub_segments)
      sub_segments.append(sub_sub_segments)
      print('SUB SEGMENTS ', sub_segments)



    final_segments.append(sub_segments)
    print('FINAL SEGMENTS ', final_segments)

  final_pts = []

  for i in range(len(final_segments)):
    segment_in_consideration = final_segments[i]
    pts = []
    for seg in segment_in_consideration:
      if len(seg)>0:
        for s in seg:
          if len(s)>0:
            idx = len(s)//2
            print(s)
            pts.append(s[idx])

      else:
        pts.append([])

    final_pts.append(pts)

  final_final_pts = []

  for list_ in final_pts:
    temp = []
    for l in list_:
      if len(l)>0:
        a,b = l
        temp.append([a,b])
      else:
        temp.append([])
    final_final_pts.append(temp)

  with open(path, 'wb') as file:
        pickle.dump(final_final_pts, file)